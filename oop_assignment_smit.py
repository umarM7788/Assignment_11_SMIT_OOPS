# -*- coding: utf-8 -*-
"""OOP Assignment SMIT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sW_FXoi2ggmqo4GAlwkPySkG-xT71fJb
"""

# OOP Assignment

# Question #01

class Person:
    def __init__(self, name, age, country):
        self.name = name
        self.age = age
        self.country = country

    def display_details(self):
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Country: {self.country}")

# Creating two instances of the Person class
person1 = Person("Alice", 30, "USA")
person2 = Person("Bob", 25, "Canada")

# Displaying details of both persons
print("Details of Person 1:")
person1.display_details()

print("\nDetails of Person 2:")
person2.display_details()

# Question 02

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def calculate_area(self):
        return self.width * self.height

    def calculate_perimeter(self):
        return 2 * (self.width + self.height)

# Creating an instance of the Rectangle class
rectangle = Rectangle(5, 10)

# Calculating and displaying the area and perimeter
area = rectangle.calculate_area()
perimeter = rectangle.calculate_perimeter()

print(f"Area of the rectangle: {area}")
print(f"Perimeter of the rectangle: {perimeter}")

# Question #03

class Vehicle:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def display_details(self):
        print(f"Make: {self.make}")
        print(f"Model: {self.model}")
        print(f"Year: {self.year}")

class Car(Vehicle):
    def __init__(self, make, model, year, doors):
        super().__init__(make, model, year)
        self.doors = doors

    def display_details(self):
        super().display_details()
        print(f"Number of doors: {self.doors}")

# Creating an instance of the Car class
car = Car("Toyota", "Camry", 2021, 4)

# Displaying the details of the car
car.display_details()

# Question #04

class BankAccount:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposited: {amount}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
            print(f"Withdrawn: {amount}")
        else:
            print("Insufficient balance or invalid amount.")

    def display_balance(self):
        print(f"Account Number: {self.account_number}")
        print(f"Balance: {self.balance}")

# Creating instances of BankAccount
account1 = BankAccount("123456", 1000)
account2 = BankAccount("654321")

# Depositing and withdrawing money
account1.deposit(500)
account1.withdraw(300)
account1.display_balance()

account2.deposit(1000)
account2.withdraw(1500)
account2.display_balance()

# Question 05:

import math

class Shape:
    def calculate_area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def calculate_area(self):
        return math.pi * (self.radius ** 2)

class Triangle(Shape):
    def __init__(self, base, height):
        self.base = base
        self.height = height

    def calculate_area(self):
        return 0.5 * self.base * self.height

# Creating an instance of Circle and calculating its area
circle = Circle(5)
print(f"Area of the circle: {circle.calculate_area()}")

# Creating an instance of Triangle and calculating its area
triangle = Triangle(10, 5)
print(f"Area of the triangle: {triangle.calculate_area()}")

# Question #06

class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary

    def calculate_annual_salary(self):
        return self.salary * 12

class Manager(Employee):
    def __init__(self, name, salary, department, bonus=5000):
        super().__init__(name, salary)
        self.department = department
        self.bonus = bonus

    def calculate_annual_salary(self):
        return super().calculate_annual_salary() + self.bonus

# Creating instances of Manager class and calculating their annual salary
manager1 = Manager("Alice", 8000, "HR")
manager2 = Manager("Bob", 9000, "Finance")

print(f"Annual salary of {manager1.name}: {manager1.calculate_annual_salary()}")
print(f"Annual salary of {manager2.name}: {manager2.calculate_annual_salary()}")

# Question #07

class Book:
    def __init__(self, title, author, publication_year):
        self.title = title
        self.author = author
        self.publication_year = publication_year

    def display_details(self):
        print(f"Title: {self.title}")
        print(f"Author: {self.author}")
        print(f"Publication Year: {self.publication_year}")

class Ebook(Book):
    def __init__(self, title, author, publication_year, price):
        super().__init__(title, author, publication_year)
        self.price = price

    def display_details(self):
        super().display_details()
        print(f"Price: ${self.price}")

# Creating an instance of Ebook class and displaying details
ebook = Ebook("Digital Fortess", "Dan Brown", 1998, 9.99)
ebook.display_details()

# Question #08

class Animal:
    def __init__(self, species, sound):
        self.species = species
        self.sound = sound

    def make_sound(self):
        print(f"The {self.species} goes '{self.sound}'")

class Dog(Animal):
    def __init__(self, species, sound, color):
        super().__init__(species, sound)
        self.color = color

    def make_sound(self):
        super().make_sound()
        print(f"The dog's color is {self.color}")

# Creating an instance of Dog class and making it make its sound
dog = Dog("dog", "bark", "brown")
dog.make_sound()

# Question #09:

class Bank:
    def __init__(self, name):
        self.name = name
        self.branches = []

    def add_branch(self, branch):
        self.branches.append(branch)
        print(f"Branch '{branch}' added.")

    def remove_branch(self, branch):
        if branch in self.branches:
            self.branches.remove(branch)
            print(f"Branch '{branch}' removed.")
        else:
            print(f"Branch '{branch}' not found.")

    def display_branches(self):
        print(f"Branches of {self.name}: {', '.join(self.branches)}")

# Creating an instance of Bank class and performing operations
bank = Bank("National Bank")
bank.add_branch("Main Branch")
bank.add_branch("City Branch")
bank.remove_branch("City Branch")
bank.display_branches()

# Question #10

class Product:
    def __init__(self, product_id, name, price):
        self.product_id = product_id
        self.name = name
        self.price = price

    def calculate_total_price(self, quantity):
        return self.price * quantity

class PersonalCareProduct(Product):
    def __init__(self, product_id, name, price, warranty_period):
        super().__init__(product_id, name, price)
        self.warranty_period = warranty_period

    def calculate_total_price(self, quantity):
        total = super().calculate_total_price(quantity)
        print(f"Warranty period: {self.warranty_period} years")
        return total

# Creating an instance of PersonalCareProduct and calculating total price
personal_care_product = PersonalCareProduct(101, "Shampoo", 5.99, 1)
print(f"Total price: ${personal_care_product.calculate_total_price(3)}")

# Question #11

class BankAccount:
    def __init__(self, account_number, account_holder_name, balance=0):
        self.account_number = account_number
        self.account_holder_name = account_holder_name
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposited: {amount}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
            print(f"Withdrawn: {amount}")
        else:
            print("Insufficient balance or invalid amount.")

    def transfer(self, amount, recipient_account):
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
            recipient_account.balance += amount
            print(f"Transferred {amount} to account {recipient_account.account_number}")
        else:
            print("Insufficient balance or invalid amount.")

    def display_balance(self):
        print(f"Account Number: {self.account_number}, Balance: {self.balance}")

# Creating instances of BankAccount and performing operations
account1 = BankAccount("123456", "Alice", 1000)
account2 = BankAccount("654321", "Bob", 500)

account1.deposit(500)
account1.withdraw(200)
account1.transfer(300, account2)

account1.display_balance()
account2.display_balance()

# Question #12

class University:
    def __init__(self, name):
        self.name = name
        self.departments = []

    def add_department(self, department):
        self.departments.append(department)
        print(f"Department '{department}' added.")

    def remove_department(self, department):
        if department in self.departments:
            self.departments.remove(department)
            print(f"Department '{department}' removed.")
        else:
            print(f"Department '{department}' not found.")

    def display_departments(self):
        print(f"Departments of {self.name}: {', '.join(self.departments)}")

# Creating an instance of University and performing operations
university = University("Tech University")
university.add_department("Computer Science")
university.add_department("Electrical Engineering")
university.remove_department("Electrical Engineering")
university.display_departments()